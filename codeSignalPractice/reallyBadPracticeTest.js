// Let's say a triple (a, b, c) is a zigzag if either a < b > c or a > b < c.
// Given an array of integers numbers, your task is to check all the triples of its consecutive elements for being a zigzag. 
// More formally, your task is to construct an array of length numbers.length - 2, 
// where the ith element of the output array equals 1 if the triple (numbers[i], numbers[i + 1], numbers[i + 2]) is a zigzag, and 0 otherwise.







// You are given an array of integers a. A new array b is generated by rearranging the elements of a in the following way:

// b[0] is equal to a[0];
// b[1] is equal to the last element of a;
// b[2] is equal to a[1];
// b[3] is equal to the second-last element of a;
// b[4] is equal to a[2];
// b[5] is equal to the third-last element of a;
// and so on.
// Your task is to determine whether the new array b is sorted in strictly ascending order or not.

// Here is how the process of generating the new array b works:












// You are given a boolean matrix field representing the distribution of bombs in the rectangular field. You are also given integers x and y, representing the coordinates of the player's first clicked cell - x represents the row index, and y represents the column index, both of which are 0-based.

// Your task is to return an integer matrix of the same dimensions as field, representing the resulting field after applying this click. If a cell remains concealed, the corresponding element should have a value of -1.









// You are given two arrays of integers a and b, which are both sorted in an ascending order and contain unique elements (i.e. no duplicates).

// You can take several (possibly zero) numbers from the array b and add them to a at any positions in any order. You want the array a to be an arithmetic progression after this.

// Your task is to find the maximal length of the resulting arithmetic progression represented by array a that can be achieved. If it is impossible to obtain an array forming an arithmetic progression, return -1.

// this is not the whole solution
function solution(a, b) {
  if (a === b) {
      return true;
  } else {
      return false;
  }
}
